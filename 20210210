//
//  ViewController.swift
//  test
//
//  Created by shin on 2021/02/10.
//  Copyright © 2021年 hata. All rights reserved.
//

import UIKit

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        
        let myint : Int = 111111111111111
        let myint2 : UInt = 222222222222222
        let myint44 : UInt8 = 23
        let myint3 : Int64 = 222222222222222
        let myintdsadasd : Float = 22222
        let dsad : UInt64 = 222222222222222
        let dsaddasd : String = "sdadasd"
        let dsadddd : Double = 4214
        
        print(myint)
        print(myint2)
        print(myint44)
        print(myint3)
        print(myintdsadasd)
        print(dsad)
        print(dsaddasd)
        print(dsadddd)
        
        typealias NewInt = Int
        let oooo : NewInt = 3123213
        print(oooo)
        typealias NewIntII = NewInt
        let dadadadada : NewIntII = 223445
        print(dadadadada)
        let dadadadaddda : NewIntII = 223445
        for index in 2...4 {
            print("\(index) 乘于 5 为：\(index * 5)")
        }
        var someInts:[Int] = [12220, 20323, 30111, 232323]
        
        for index in someInts {
            print( "index 的值为 \(index)")
        }
        
        var stringB = String("Hello, ssssssss World!")
        print(stringB + "######")
        if (!stringB.isEmpty) {
            print(stringB)
        }

        let stringB1 = String("菜鸟教程：")
        stringB += "http://www.runoob.com"
        print( stringB )

        let constA = "菜鸟教程："
        let constB = "http://www.runoob.com"
        
        var stringA = constA + constB
        print( stringA )
        
        for code in stringA.utf16 {
            print("\(code) ")
        }
        
        print("UTF-8 编码: ")
        for code in stringA.utf8 {
            print("\(code) ")
        }
        
        for code in stringA.characters {
            print("\(code) ")
        }
        
        var someIntsss = [Int](repeating: 11111, count: 3)
        var someVar = someIntsss[0]
        
        print( "第一个元素的值 \(someVar)" )
        print( "第二个元素的值 \(someIntsss[1])" )
        print( "第三个元素的值 \(someIntsss[2])" )
        
        var someIntsssssss = [Int]()
        
        someIntsssssss.append(20)
        someIntsssssss.append(30)
        someIntsssssss += [40]
        someIntsssssss.append(32323)
        
        
        print( "第一个元素的值 \(someIntsssssss[0])" )
        print( "第二个元素的值 \(someIntsssssss[1])" )
        print( "第三个元素的值 \(someIntsssssss[2])" )
        
        var someStrsss = [String]()
        
        someStrsss.append("Apple")
        someStrsss.append("Amazon")
        someStrsss.append("Runoob")
        someStrsss += ["Google"]
        
        for item in someStrsss {
            print(item)
        }
        let iii = someStrsss.count
        print(iii)
        
        var someDict:[Int:String] = [1:"One", 2:"Two", 555:"Three"]
        // 旧的值会被吐出来
        var oldVal = someDict.updateValue("cacacacaca", forKey: 1)
        someDict.removeValue(forKey: 2)
        print(someDict[2])
        for (a, v) in someDict {
            print("字典 key \(a) -  字典 value \(v)")
        }
        var someDict1:[Int:String] = [4:"One", 44:"Two", 444:"Three"]
        var someDict2:[Int:String] = [22:"Four",222:"Five"]
        
        print("someDict1 含有 \(someDict1.count) 个键值对")
        print("someDict2 含有 \(someDict2.count) 个键值对")
        print("someDict2 含有 \(someDict2.count) 个键值对")
        
        print(sitename())
        print(runoob(name : "AAA", site : "BBB"))
        print(backwards(s1 : "BBB", s2 : "AAA"))
        
        let names = ["AT", "AE", "D", "S", "BE"]
        var reversed = names.sorted(by: >)
        print(reversed)
    }

    func runoob(name: String, site: String) -> String {
        return name + site
    }
    
    func backwards(s1: String, s2: String) -> Bool {
        return s1 > s2
    }
    
    func sitename() -> String {
        return "菜鸟教程"
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
}

计算属性
除存储属性外，类、结构体和枚举可以定义计算属性，计算属性不直接存储值，而是提供一个 getter 来获取值，一个可选的 setter 来间接设置其他属性或变量的值。
import Cocoa

class sample {
    var no1 = 0.0, no2 = 0.0
    var length = 300.0, breadth = 150.0
    
    var middle: (Double, Double) {
        get{
            return (length / 2, breadth / 2)
        }
        set(axis){
            no1 = axis.0 - (length / 2)
            no2 = axis.1 - (breadth / 2)
        }
    }
}

var result = sample()
print(result.middle)
result.middle = (0.0, 10.0)

print(result.no1)
print(result.no2)
以上程序执行输出结果为：
(150.0, 75.0)
-150.0
-65.0
如果计算属性的 setter 没有定义表示新值的参数名，则可以使用默认名称 newValue。
只读计算属性
只有 getter 没有 setter 的计算属性就是只读计算属性。
只读计算属性总是返回一个值，可以通过点(.)运算符访问，但不能设置新的值。
import Cocoa

class film {
    var head = ""
    var duration = 0.0
    var metaInfo: [String:String] {
        return [
            "head": self.head,
            "duration":"\(self.duration)"
        ]
    }
}

var movie = film()
movie.head = "Swift 属性"
movie.duration = 3.09

print(movie.metaInfo["head"]!)
print(movie.metaInfo["duration"]!)
以上程序执行输出结果为：
Swift 属性
3.09
注意：
必须使用var关键字定义计算属性，包括只读计算属性，因为它们的值不是固定的。let关键字只用来声明常量属性，表示初始化后再也无法修改的值。
属性观察器
属性观察器监控和响应属性值的变化，每次属性被设置值的时候都会调用属性观察器，甚至新的值和现在的值相同的时候也不例外。
可以为除了延迟存储属性之外的其他存储属性添加属性观察器，也可以通过重载属性的方式为继承的属性（包括存储属性和计算属性）添加属性观察器。
注意：
不需要为无法重载的计算属性添加属性观察器，因为可以通过 setter 直接监控和响应值的变化。
可以为属性添加如下的一个或全部观察器：
willSet在设置新的值之前调用
didSet在新的值被设置之后立即调用
willSet和didSet观察器在属性初始化过程中不会被调用
import Cocoa

class Samplepgm {
    var counter: Int = 0{
        willSet(newTotal){
            print("计数器: \(newTotal)")
        }
        didSet{
            if counter > oldValue {
                print("新增数 \(counter - oldValue)")
            }
        }
    }
}
let NewCounter = Samplepgm()
NewCounter.counter = 100
NewCounter.counter = 800
以上程序执行输出结果为：
计数器: 100
新增数 100
计数器: 800
新增数 700
