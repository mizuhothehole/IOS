今天遇到棘手的一个问题。
Apple账号改了一次密码（Apple ID的密码规则变了）
Xcode里preference里的account就是半天登陆不进去了。

突发奇想，去keychain管理里面，把com.apple.gs.appleid.auth
这个开头的全删除，再重新登录一遍，OK，好用了。编译成功

哎。。客户真的是太任性了。
客户的需求：在UILabel里面加上个Hyperlink。
而且这个Label上的Hyperlink，iOS根本就不支持，看着氛围，也没打算支持。

//
//  ViewController.swift
//  LabelHyperlink
//
//  Created by shin on 2021/07/03.
//  Copyright © 2021年 technology. All rights reserved.
//

import UIKit

class ViewController: UIViewController {
    
    @IBOutlet weak var label: HyperlinkLabel!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        //label = (HyperlinkLabel.banner(withAlignment: .left, customStyling: false, tapHandler: didTap))
        let attributedString = NSMutableAttributedString(string: "Check this webpage: %0$@. \nLink to %1$@ on the App Store. \nFinally link to %2$@.")
        let replacements = [("Augmented Code", URL(string: "https://augmentedcode.io")!),
                            ("SignalPath", URL(string: "https://geo.itunes.apple.com/us/app/signalpath/id1210488485?mt=12")!),
                            ("GitHub", URL(string: "https://github.com/laevandus")!)]
        replacements.enumerated().forEach { index, value in
            let linkAttribute: NSAttributedStringKey = .hyperlink
            let attributes: [NSAttributedStringKey: Any] = [
                linkAttribute: value.1
            ]
            let urlAttributedString = NSAttributedString(string: value.0, attributes: attributes)
            let range = (attributedString.string as NSString).range(of: "%\(index)$@")
            attributedString.replaceCharacters(in: range, with: urlAttributedString)
        }
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.alignment = .left
        attributedString.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: attributedString.length))
        
        label.attributedText = attributedString
        label.translatesAutoresizingMaskIntoConstraints = false
        label.didTapOnURL = didTap
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
        
    }
    
    private func didTap(_ url: URL) {
        
    }
}

private extension HyperlinkLabel {
    static func banner(withAlignment alignment: NSTextAlignment, customStyling: Bool, tapHandler: @escaping (URL) -> Void) -> HyperlinkLabel {
        let attributedString = NSMutableAttributedString(string: "Check this webpage: %0$@. \nLink to %1$@ on the App Store. \nFinally link to %2$@.")
        let replacements = [("Augmented Code", URL(string: "https://augmentedcode.io")!),
                            ("SignalPath", URL(string: "https://geo.itunes.apple.com/us/app/signalpath/id1210488485?mt=12")!),
                            ("GitHub", URL(string: "https://github.com/laevandus")!)]
        replacements.enumerated().forEach { index, value in
            let linkAttribute: NSAttributedStringKey = customStyling ? .hyperlink : .link
            let attributes: [NSAttributedStringKey: Any] = [
                linkAttribute: value.1
            ]
            let urlAttributedString = NSAttributedString(string: value.0, attributes: attributes)
            let range = (attributedString.string as NSString).range(of: "%\(index)$@")
            attributedString.replaceCharacters(in: range, with: urlAttributedString)
        }
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.alignment = alignment
        attributedString.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: attributedString.length))
        
        let label = HyperlinkLabel()
        label.attributedText = attributedString
        label.translatesAutoresizingMaskIntoConstraints = false
        label.didTapOnURL = tapHandler
        return label
    }
}

这里是重点：
//
//  HyperlinkLabel.swift
//  LabelHyperlink
//
//  Created by shin on 2021/07/05.
//  Copyright © 2021年 technology. All rights reserved.
//

import Foundation
import UIKit

final class HyperlinkLabel: UILabel {
    
    // MARK: Creating the Label
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        commonInit()
    }
    
    required init?(coder: NSCoder) {
        super.init(coder: coder)
        commonInit()
    }
    
    private func commonInit() {
        numberOfLines = 0
        isUserInteractionEnabled = true
    }
    
    override var attributedText: NSAttributedString? {
        get {
            return super.attributedText
        }
        set {
            super.attributedText = {
                guard let newValue = newValue else { return nil }
                // Apply custom hyperlink attributes
                let text = NSMutableAttributedString(attributedString: newValue)
                text.enumerateAttribute(.hyperlink, in: NSRange(location: 0, length: text.length), options: .longestEffectiveRangeNotRequired) { (value, subrange, _) in
                    guard let value = value else { return }
                    assert(value is URL)
                    text.addAttributes(hyperlinkAttributes, range: subrange)
                }
                // Fill in font attributes when not set
                text.enumerateAttribute(.font, in: NSRange(location: 0, length: text.length), options: .longestEffectiveRangeNotRequired) { (value, subrange, _) in
                    guard value == nil, let font = font else { return }
                    text.addAttribute(.font, value: font, range: subrange)
                }
                return text
            }()
        }
    }
    
    // MARK: Finding Hyperlink Under Touch
    
    var hyperlinkAttributes: [NSAttributedStringKey: Any] = [.foregroundColor: UIColor.blue]
    
    var didTapOnURL: (URL) -> Void = { url in
        if UIApplication.shared.canOpenURL(url) {
            UIApplication.shared.open(url, options: [:], completionHandler: { success in
                if success {
                    print("Opened URL \(url) successfully")
                }
                else {
                    print("Failed to open URL \(url)")
                }
            })
        }
        else {
            print("Can't open the URL: \(url)")
        }
    }
    
    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        if let url = self.url(at: touches) {
            didTapOnURL(url)
        }
        else {
            super.touchesEnded(touches, with: event)
        }
    }
    
    private func url(at touches: Set<UITouch>) -> URL? {
        guard let attributedText = attributedText, attributedText.length > 0 else { return nil }
        guard let touchLocation = touches.sorted(by: { $0.timestamp < $1.timestamp } ).last?.location(in: self) else { return nil }
        guard let textStorage = preparedTextStorage() else { return nil }
        let layoutManager = textStorage.layoutManagers[0]
        let textContainer = layoutManager.textContainers[0]
        
        let characterIndex = layoutManager.characterIndex(for: touchLocation, in: textContainer, fractionOfDistanceBetweenInsertionPoints: nil)
        guard characterIndex >= 0, characterIndex != NSNotFound else { return nil }
        
        // Glyph index is the closest to the touch, therefore also validate if we actually tapped on the glyph rect
        let glyphRange = layoutManager.glyphRange(forCharacterRange: NSRange(location: characterIndex, length: 1), actualCharacterRange: nil)
        let characterRect = layoutManager.boundingRect(forGlyphRange: glyphRange, in: textContainer)
        guard characterRect.contains(touchLocation) else { return nil }
        
        // Link styled by Apple
        if let url = textStorage.attribute(.link, at: characterIndex, effectiveRange: nil) as? URL {
            return url
        }
        // Custom link style
        return textStorage.attribute(.hyperlink, at: characterIndex, effectiveRange: nil) as? URL
    }
    
    private func preparedTextStorage() -> NSTextStorage? {
        guard let attributedText = attributedText, attributedText.length > 0 else { return nil }
        
        // Creates and configures a text storage which matches with the UILabel's configuration.
        let layoutManager = NSLayoutManager()
        let textContainer = NSTextContainer(size: bounds.size)
        textContainer.lineFragmentPadding = 0
        let textStorage = NSTextStorage(string: "")
        layoutManager.addTextContainer(textContainer)
        textStorage.addLayoutManager(layoutManager)
        
        textContainer.lineBreakMode = lineBreakMode
        textContainer.size = textRect(forBounds: bounds, limitedToNumberOfLines: numberOfLines).size
        textStorage.setAttributedString(attributedText)
        
        return textStorage
    }
}

extension NSAttributedStringKey {
    static let hyperlink = NSAttributedStringKey("hyperlink")
}
