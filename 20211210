引用源
https://teratail.com/questions/344066

どこからどこまでがサブスレッドで


override func viewDidLoad() {
  // (A)メインスレッド
  let task = URLSession.shared.dataTask(with:request){
    // (B)サブスレッド
    DispatchQueue.main.async{
      // (C)メインスレッド
    }
    // (D)サブスレッド
  }
  // (E)メインスレッド
}
上記のようになります。
ただし、実行順番は(A)(B)(C)(D)(E)ではありません。

最初に(A)の部分が実行されます。
その中で、URLSession.shared.dataTask関数が、{}内をサブスレッドに渡します。渡した時点でこの関数は終わるので、(E)の部分に実行が移ります。ちなみに、(A)と(E)は一連のメインスレッドです。

URLSession.shared.dataTaskで{}内が渡されたサブスレッドは、メインスレッドとは関係なく(B)の処理を行います。(B)の中で、通信など時間がかかる処理を行います。その間、メインスレッドはこのサブスレッドと無関係に動けるので、画面の書き換え(ユーザーが画面をスクロールさせる等)を行うことができます。

通信が終わった後、DispatchQueue.main.async関数が、{}内をメインスレッドに渡します。渡した時点でDispatchQueue.main.async関数は終わるので、(D)の部分に実行が移ります。(D)の部分を実行し終わると、このスレッドは処理が終わるので無くなります。

DispatchQueue.main.asyncで{}内が渡されたメインスレッドは、(C)を実行します。

一連の処理を並列処理を使わずに書いたとすると、viewDidLoadが呼ばれてから通信が終わるまで、画面には何も表示されない、または、表示されてもユーザーは何も操作できなくなります。これは、画面表示やユーザーアクセスがメインスレッドで行われているためです。
